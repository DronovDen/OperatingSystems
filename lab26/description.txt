FILE * popen(const char *comstring, const char *type);
int pclose(FILE *strm);

Как и процедура system, процедура popen создает дочерний процесс командного
интерпретатора для запуска команды, заданной параметром comstring.
Но, в отличие от процедуры system, она также создает канал между вызывающим процессом
и командой, а затем возвращает структуру FILE, связанную с этим каналом.
Если значение параметра type равно w, то программа может выполнять запись
в стандартный ввод при помощи структуры FILE. Если же значение параметра
type равно r, то программа сможет выполнять чтение из стандартного вывода программы.
Таким образом, процедура popen представляет простой и понятный метод
взаимодействия с другой программой.
Для закрытия потока, открытого при помощи процедуры popen, должна всегда
использоваться процедура pclose. Она будет ожидать завершения команды,
после чего вернет статус ее завершения.

comstring - указатель на строку символов, содержащую любую правильную команду
интерпретатора shell. Эта командная строка может использовать все механизмы shell, такие
как поиск команд в PATH, расширение метасимволов, перенаправление ввода/вывода и т.д..
Это работает потому, что popen(3) исполняет shell и передает ему эту командную строку как
аргумент. В качестве shell используется значение переменной среды SHELL, и /bin/sh, если
эта переменная не определена.

Главное отличие pclose(3) от fclose(3) состоит в том, что pclose(3) ожидает завершения
созданного процесса. Запоминание pid созданного процесса в разных системах
осуществляется по разному; в Linux, в структуре FILE для этого предусмотрено специальное
поле. В Solaris, в структуре FILE подходящего поля нет, библиотека создаёт отдельный
список pid, ассоциированных со структурами FILE.

Традиционные библиотечные функции для работы с каналами - popen(3) и pclose(3). SVR4
добавляет функции p2open(3G) и p2close(3G). Их действия аналогичны, но popen(3S) создает
однонаправленную линию связи, а p2open(3G) - двунаправленную линию для связи между
родительским и порожденным процессами.
Сначала popen(3) создает канал, затем порождает процесс, исполняющий команду, заданную
первым аргументом, и перенаправляет ее стандартный ввод или вывод. Соответственно,
pclose(3) закрывает канал и ждет завершения порожденного процесса.
Используя popen(3) и pclose(3), программа может исполнить любую допустимую команду,
которая может быть набрана в командной строке вашего интерпретатора shell. Затем
программа может читать со стандартного вывода этой команды или писать в ее стандартный
ввод.
Функция popen(3) реализована с использованием pipe(2) для создания канала, fork(2) для
запуска подпроцесса и dup(2) для перенаправления стандартного ввода или вывода в канал.
Функция pclose(3), в свою очередь, использует close(2), чтобы закрыть канал, и waitid(2) или
waitpid(2) для того, чтобы дождаться завершения порождённого процесса. На диаграмме
пунктирная линия показывает, что родительский процесс, ожидает завершения своего
подпроцесса.