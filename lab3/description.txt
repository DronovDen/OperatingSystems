У каждого процесса есть два пользовательских идентификатора: реальный и эффективный.
Реальный идентификатор пользователя - это идентификатор пользователя, который ее запускает, а эффективный - 
это идентификатор пользователя, владеющего программой. 

Владелец любого файла, созданного процессом, определяется эффективным идентификатором пользователя, 
а группа файла — эффективным идентификатором группы. В Unix, исполняемые файлы могут иметь специальные атрибуты: 
биты установки идентификатора пользователя или группы (setuid- и setgid-биты). Эти биты устанавливаются
с помощью команды chmod(1) или системного вызова chmod(2). Если один или оба этих бита установлены, при запуске такого файла, 
эффективный идентификатор пользователя и/или группы у процесса становится таким же, как и у владельца и/или 
группы файла с программой. Используя программы с setuid-битом, можно получить доступ к файлам и устройствам, которые обычным образом 
недостижимы. Например, если какой-либо файл данных доступен по чтению и записи только для владельца, другие пользователи не могут 
получить доступ к этому файлу. Если же владелец этого файла напишет программу доступа к этому файлу и установит setuid-бит, 
тогда все пользователи данной программы смогут получить доступ к файлу, ранее недостижимому.

До установки бита идентификатора пользователя, другой человек, запуская программу, не имеет доступа к файлу
После установки, доступ к файлу есть, т.к эффективный идентификатор установлен, как у владельца программы

В таблице процессов, кроме идентификаторов PID и PPID, хранятся eUID (effective UID – эффективный идентификатор пользователя)
владельца процесса и eGID (effective GID – эффективный идентификатор группы) группы процесса. Фактические (реальные) владелец
и группа процесса – это пользователь и группа, которые запустили процесс, а эффективные владелец и группа процесса – это те,
от имени которых запущен процесс. Для определения прав доступа используются эффективные идентификаторы, а для задач управления
процессом (например, посылки сигнала процессам, которые запустил определенный пользователь, см. описание команды pkill ниже) – реальные.
Эти идентификаторы передаются по наследству от родительского процесса к дочернему

где физически находится бит setuid (inode)


Подобный механизм может использоваться для управления доступом к критическим
данным. Конфиденциальная информация может быть защищена от
публичного доступа или изменения при помощи стандартных прав доступа на 
чтение/запись/выполнение. Владелец файла создает программу, которая будет
предоставлять ограниченный доступ к файлу. Затем для файла программы уста
навливается флаг доступа S_ISUID, что позволяет другим пользователям получать
ограниченный доступ к файлу только при помощи данной программы.
Очевидно, программа должна быть написана аккуратно во избежание случайного
и умышленного нарушения защиты.

Использование suid программ для нарушения защиты – известнейший способ взлома систем. Существует
набор строгих правил составления защищенных suid программ. Самое простое из этих правил
(но явно недостаточное) – не давать никому права читать содержимое таких программ. Благодаря
этому иногда можно скрыть слабое место программы от посторонних глаз